{
	"info": {
		"_postman_id": "e49c51ab-eae3-4a06-8bf6-ad5e76834cdc",
		"name": "todoist",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TASK",
			"item": [
				{
					"name": "Create Task",
					"item": [
						{
							"name": "Create new task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"//var content = pm.environment.get(\"taskName\");\r",
											"var content = pm.variables.get(\"taskNameTDD\");\r",
											"pm.test(\"Task content is correct\", function () {\r",
											"    pm.expect(jsonData.content).to.eql(content);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is NOT 204\", function () {\r",
											"    pm.response.to.not.have.status(204);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"integer\" },\r",
											"        \"content\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"content\"]\r",
											"};\r",
											"pm.test('Validate schema', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"taskId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{taskNameTDD}}\",\r\n    \"due_string\": \"tomorrow at 12:00\",\r\n    \"due_lang\": \"en\",\r\n    \"priority\": {{taskPriority}}\r\n}"
								},
								"url": {
									"raw": "{{baseURL}}",
									"host": [
										"{{baseURL}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Tasks",
					"item": [
						{
							"name": "Get active tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var schema = {\r",
											"    \"type\": \"array\"\r",
											"};\r",
											"pm.test('Validate schema', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is NOT 204\", function () {\r",
											"    pm.response.to.not.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}",
									"host": [
										"{{baseURL}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Task",
					"item": [
						{
							"name": "Get task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"// var content = pm.environment.get(\"taskName\");\r",
											"var content = pm.variables.get(\"taskNameTDD\");\r",
											"pm.test(\"Task content is correct\", function () {\r",
											"    pm.expect(jsonData.content).to.eql(content);\r",
											"});\r",
											"\r",
											"var id = pm.environment.get(\"taskId\");\r",
											"pm.test(\"Task Id is correct\", function () {\r",
											"    pm.expect(jsonData.id).to.eql(id);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is NOT 204\", function () {\r",
											"    pm.response.to.not.have.status(204);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": { \"type\": \"integer\" },\r",
											"        \"completed\": { \"type\": \"boolean\" }\r",
											"    },\r",
											"    \"required\": [\"id\", \"completed\"]\r",
											"};\r",
											"pm.test('Validate schema', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{taskId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Task",
					"item": [
						{
							"name": "Update a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is NOT 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"task 2\"\r\n}"
								},
								"url": {
									"raw": "{{baseURL}}/{{taskId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Change Task Status",
					"item": [
						{
							"name": "Close task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is NOT 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{taskId}}/close",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}",
										"close"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reopen Task",
					"item": [
						{
							"name": "Reopen task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is NOT 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{taskId}}/reopen",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}",
										"reopen"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Task",
					"item": [
						{
							"name": "Delete task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is NOT 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{taskId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 2xx\", function () {",
					"    pm.response.to.be.success;",
					"});",
					"",
					"pm.test(\"Response time is less than 600ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(600);",
					"});"
				]
			}
		}
	]
}